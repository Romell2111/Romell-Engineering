/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.administrativerole;

import Business.EcoSystem;
import Business.enterprise.Enterprise;
import Business.organization.Organization;
import Business.organization.PatientOrganization;
import Business.patient.Patient;
import Business.useraccount.UserAccount;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Romell
 */
public class PatientAnalytics extends javax.swing.JPanel {
     private JPanel userProcessContainer;
          private  Enterprise enterprise; 
          private  UserAccount account;
          public int max;
          private EcoSystem system;

    /**
     * Creates new form PatientAnalytics
     */
    

    PatientAnalytics(JPanel userProcessContainer, Enterprise enterprise, UserAccount account) {
     
        
    }

    PatientAnalytics(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, EcoSystem business) {
           initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account = account;
        this.system=business;
        
    }
    public void prediction()
    {
        for (Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
        {PatientOrganization porg=null;
        
        if (organization instanceof PatientOrganization)
        { porg=(PatientOrganization)organization;
        for (Patient patient:porg.getPatientDirectory().getPatientDirectory())
        {
            max = Integer.MIN_VALUE;
            if(patient.getAbnormalNo() > max){
            max = patient.getAbnormalNo();
            }

          
            
        }
            }
        }
        for (Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
        {PatientOrganization porg=null;
        
        if (organization instanceof PatientOrganization)
        { porg=(PatientOrganization)organization;;
        for (Patient patient:porg.getPatientDirectory().getPatientDirectory())
        {
           if (patient.getAbnormalNo()==max)
           {JOptionPane.showMessageDialog(null, "Please do not use this medicine"+patient.getMedicine().toString());
               
           }

          
            
        }
            }
        }
        
    }
    
    
    public void populatetop10final()
           {int rowCount = tbl.getRowCount();
     DefaultTableModel model = (DefaultTableModel)tbl.getModel();
        for(int i=rowCount-1;i>=0;i--) {
            model.removeRow(i);
        } HashMap<String, Integer> hmap = new HashMap<String, Integer>();
        for (Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
        {PatientOrganization porg=null;
        
        if (organization instanceof PatientOrganization)
        { porg=(PatientOrganization)organization;
        for (Patient patient:porg.getPatientDirectory().getPatientDirectory())
         {System.out.println("ENTERED LOOP 1");
       
       
        hmap.put(patient.getName(), patient.getAbnormalNo());
        }
        }
        }
//        Set<Entry<Integer, String>> entries = hmap.entrySet();
//         TreeMap<Integer, String> sorted = new TreeMap<>(hmap);
//          Map<Integer, String> map = new TreeMap<Integer, String>(hmap); 
//          Set<Entry<Integer, String>> mappings = sorted.entrySet();
           
             Object[]a=hmap.entrySet().toArray();
             Arrays.sort(a, new Comparator() {
               @Override
               public int compare(Object o1, Object o2) {
                   return((Map.Entry<String,Integer>)o2).getValue().compareTo(((Map.Entry<String,Integer>)o1).getValue());
               }
           });
             for (Object e:a)
             {
             Object row[] = new Object[2];
//             for(Entry<Integer, String> mapping : mappings)
//             {
            row[0] = (((Map.Entry<String,Integer>)e).getKey());
          row[1] = (((Map.Entry<String,Integer>)e).getValue());
//            row[2] = orderItem.getQuantity();
//            row[3] = orderItem.getSales_price()*orderItem.getQuantity();
            
            model.addRow(row);
         }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        Predict = new javax.swing.JButton();

        jButton1.setText("Patients with frequent Heart Attacks");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PatientName", "Frequency"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        Predict.setText("Predict");
        Predict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PredictActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(Predict, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(Predict, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        populatetop10final();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void PredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PredictActionPerformed
        // TODO add your handling code here:
        prediction();
    }//GEN-LAST:event_PredictActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Predict;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
